{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../src/utilities.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAGzC,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,WAA+B,EAC/B,IAAyB,EACzB,YAAyC,EACjC,EAAE;IACV,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAC7B,IAAI,WAAW,EAAE;QACf,mFAAmF;QACnF,QAAQ,GAAG,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;KAC5C;IAED,iFAAiF;IACjF,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;QAC7B,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;KAC7C;IAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,cAAc,EAAE;QACzC,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;KAC9C;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,SAA6B,EAC7B,IAAyB,EACzB,YAAyC,EACrB,EAAE;IACtB,IAAI,SAAS,EAAE;QACb,OAAO,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACtC;IAED,IAAI,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,KAAK,EAAE;QACzD,OAAO,QAAQ,CAAC;KACjB;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAU,EAAE;IAC1D,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,OAAO,UAAU,CAAC,CAAC;IACxD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAe,EAAU,EAAE;IACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,YAAY,OAAO,UAAU,CAAC,CAAC;IACvD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;AAClC,CAAC,CAAC","sourcesContent":["import { execSync } from 'child_process';\nimport { resolve, basename } from 'path';\nimport type { NodePlopAPI } from 'node-plop';\n\nexport const determinePath = (\n  destination: string | undefined,\n  data: Record<string, any>,\n  renderString: NodePlopAPI['renderString'],\n): string => {\n  let fileName = process.cwd();\n  if (destination) {\n    // Attempt to render the destination path in case it contains any template strings.\n    fileName = renderString(destination, data);\n  }\n\n  // If the destination is relative, resolve it from the current working directory.\n  if (fileName.match(/^\\.\\.\\//)) {\n    fileName = resolve(process.cwd(), fileName);\n  }\n\n  if (basename(fileName) !== 'package.json') {\n    fileName = resolve(fileName, 'package.json');\n  }\n\n  return fileName;\n};\n\nexport const determineFallback = (\n  userInput: string | undefined,\n  data: Record<string, any>,\n  renderString: NodePlopAPI['renderString'],\n): string | undefined => {\n  if (userInput) {\n    return renderString(userInput, data);\n  }\n\n  if (typeof userInput !== 'boolean' || userInput !== false) {\n    return 'latest';\n  }\n\n  return undefined;\n};\n\nexport const yarnFetchVersion = (pkgName: string): string => {\n  const result = execSync(`yarn info ${pkgName} version`);\n  return result.toString().trim();\n};\n\nexport const npmFetchVersion = (pkgName: string): string => {\n  const result = execSync(`npm view ${pkgName} version`);\n  return result.toString().trim();\n};\n"]}